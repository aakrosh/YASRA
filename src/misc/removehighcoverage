#!/usr/bin/env python

"""
Input: A fasta reference file
       A hits file
       A coverage threshold

Output: A hits file that does not have the reads that lie in regions with
coverage > specified threshold
"""

from sys import argv, stderr, exit
from getopt import getopt, GetoptError
from array import array

from fasta import *

__author__ = "Aakrosh Ratan"
__email__  = "ratan@bx.psu.edu"

# do we want the debug information to be printed?
debug_flag = False

def readreference(filename, checkChrom):
    records = fastafile(filename)
    reference = {}

    doneChrom = False
    for entry in records:
        name = entry.header.split()[0]

        if checkChrom != None and checkChrom != name: continue
        if checkChrom != None and checkChrom == name: doneChrom = True

        reference[name] = array('I',[0]*len(entry.sequence))
        print >> stderr, "Reference length: %d" % len(entry.sequence)

        if checkChrom != None and doneChrom == True: break

    records.close() 
    return reference

def addcoverageinfo(reference, hitsname):
    file =  open(hitsname, "r")

    for line in file:
        tokens = line.strip().split()

        name1   = tokens[0]
        zstart1 = int(tokens[1])
        end1    = int(tokens[2])

        ref = reference[name1]

        for i in range(zstart1, end1):
            try:
                ref[i] += 1
            except IndexError:
                reference[name1].extend([0] * (i - len(ref) + 1))
                ref = reference[name1]
                ref[i] += 1

    file.close()

def main(refname, hitsname, maxcoverage, checkChrom):
    reference = readreference(refname, checkChrom)
    print >> stderr, "Read the reference sequence"

    addcoverageinfo(reference, hitsname)
    print >> stderr, "Added the coverage information"

    locations = {}
    for k in reference.keys():
        locations[k] = {}

    numlocations = 0
    for k,v in reference.items():
        for i in range(0, len(v)):
            if v[i] > maxcoverage: 
                numlocations += 1
                locations[k][i] = 1
                print >> stderr, "x", k, i
    print >> stderr, "Number of candidate locations: %d" % numlocations
    

    # read the hits file again and only output a hit if it does not cover the
    # location with more than the expected covergae
    file = open(hitsname, "r")
    removed = 0

    for line in file:
        tokens = line.strip().split()

        name1 = tokens[0]
        start = int(tokens[1])
        stop  = int(tokens[2])

        toprint = True
        for i in range(start,stop):
            if i in locations[name1]: 
                toprint = False
                removed += 1
                break

        if toprint == True:
            print line,

    file.close()
    print >> stderr, "Removed %d reads from consideration" % removed

def usage():
    f = stderr
    print >> f, "usage:"
    print >> f, "removehighcoverage [options] reference.fa hits.txt"
    print >> f, "where the options are:"
    print >> f, "-h,--help : print usage and quit"
    print >> f, "-d,--debug: print debug information"
    print >> f, "-t,--threshold: the coverage threshold (hits to regions with"
    print >> f, "                coverage > threshold will be removed)"
    print >> f, "-c,--chromosome: only look at this chromosome"

if __name__ == "__main__":
    try:
        opts, args = getopt(argv[1:], "hdt:c:",["help", "debug","threshold=", "chromosome="])
    except GetoptError, err:
        print str(err)
        usage()
        exit(2) 

    threshold = 1000000
    checkChrom = None

    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            exit()
        elif o in ("-d", "--debug"):
            debug_flag = True
        elif o in ("-t", "--threshold"):
            threshold = int(a)
        elif o in ("-c", "--chromosome"):
            checkChrom = a
        else:
            assert False, "unhandled option"

    if len(args) != 2:
        usage()
        exit(3)

    main(args[0], args[1], threshold, checkChrom)
